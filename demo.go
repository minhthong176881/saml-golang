package main

import (
	"crypto/x509"
	"fmt"
	"html/template"
	"net/http"
	"os"

	"io/ioutil"

	"encoding/base64"
	"encoding/xml"

	saml2 "github.com/russellhaering/gosaml2"
	"github.com/russellhaering/gosaml2/types"
	dsig "github.com/russellhaering/goxmldsig"
)

func main() {
	// res, err := http.Get("https://dev-9788402.okta.com/app/exk3lamm4nTIk1cFK5d7/sso/saml/metadata")
	// if err != nil {
	// 	panic(err)
	// }

	xmlFile, err := os.Open("metadata.xml")
	if err != nil {
		panic(err)
	}

	res, err := ioutil.ReadAll(xmlFile)
	if err != nil {
		panic(err)
	}

	metadata := &types.EntityDescriptor{}
	err = xml.Unmarshal(res, metadata)
	if err != nil {
		panic(err)
	}

	certStore := dsig.MemoryX509CertificateStore{
		Roots: []*x509.Certificate{},
	}

	for _, kd := range metadata.IDPSSODescriptor.KeyDescriptors {
		for idx, xcert := range kd.KeyInfo.X509Data.X509Certificates {
			if xcert.Data == "" {
				panic(fmt.Errorf("metadata certificate(%d) must not be empty", idx))
			}
			certData, err := base64.StdEncoding.DecodeString(xcert.Data)
			if err != nil {
				panic(err)
			}

			idpCert, err := x509.ParseCertificate(certData)
			if err != nil {
				panic(err)
			}

			certStore.Roots = append(certStore.Roots, idpCert)
		}
	}

	randomKeyStore := dsig.RandomKeyStoreForTest()

	sp := &saml2.SAMLServiceProvider{
		IdentityProviderSSOURL:      metadata.IDPSSODescriptor.SingleSignOnServices[0].Location,
		IdentityProviderIssuer:      metadata.EntityID,
		ServiceProviderIssuer:       "http://localhost:3001/msr/saml/metadata",
		AssertionConsumerServiceURL: "http://localhost:3001/msr/saml/auth",
		SignAuthnRequests:           true,
		AudienceURI:                 "http://localhost:3001/msr/saml/metadata",
		IDPCertificateStore:         &certStore,
		SPKeyStore:                  randomKeyStore,
	}

	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		render(w, "views/login.html", nil)
	})

	authURL, err := sp.BuildAuthURL("")
	if err != nil {
		panic(err)
	}

	http.HandleFunc("/login", func(rw http.ResponseWriter, r *http.Request) {
		http.Redirect(rw, r, authURL, http.StatusFound)
	})

	http.HandleFunc("/msr/saml/auth", func(rw http.ResponseWriter, req *http.Request) {
		err := req.ParseForm()
		if err != nil {
			rw.WriteHeader(http.StatusBadRequest)
			return
		}

		samlResponse := ""
		if req.FormValue("SAMLResponse") != "" {
			samlResponse = req.FormValue("SAMLResponse")
		} else {
			samlResponse = ""
		}

		assertionInfo, err := sp.RetrieveAssertionInfo(samlResponse)
		if err != nil {
			fmt.Printf("assertion err: %s", err)
			rw.WriteHeader(http.StatusForbidden)
			return
		}

		if assertionInfo.WarningInfo.InvalidTime {
			fmt.Printf("Invalid time: %s", err)
			rw.WriteHeader(http.StatusForbidden)
			return
		}

		if assertionInfo.WarningInfo.NotInAudience {
			fmt.Printf("Not in audience: %s", err)
			rw.WriteHeader(http.StatusForbidden)
			return
		}

		fmt.Fprintf(rw, "NameID: %s\n", assertionInfo.NameID)

		fmt.Fprintf(rw, "Assertions:\n")

		for key, val := range assertionInfo.Values {
			fmt.Fprintf(rw, "  %s: %+v\n", key, val)
		}

		fmt.Fprintf(rw, "\n")

		fmt.Fprintf(rw, "Warnings:\n")
		fmt.Fprintf(rw, "%+v\n", assertionInfo.WarningInfo)
	})

	// println("Visit this URL To Authenticate:")

	// println(authURL)

	// println("Supply:")
	// fmt.Printf("  SP ACS URL      : %s\n", sp.AssertionConsumerServiceURL)

	err = http.ListenAndServe(":3001", nil)
	if err != nil {
		panic(err)
	}
}

func render(w http.ResponseWriter, path string, data interface{}) {
	w.Header().Set("Content-Type", "text/html")
	w.Header().Set("Cache-Control", "no-store")
	w.Header().Set("Pragma", "no-cache")
	w.WriteHeader(http.StatusOK)
	tlp := template.Must(template.ParseFiles(path))
	tlp.Execute(w, data)
}
